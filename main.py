# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newui.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys

from fucn import generate_password

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 600)
        MainWindow.setStyleSheet("background-color: rgba(0, 0, 0, 0.8);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.logo = QtWidgets.QLabel(self.centralwidget)
        self.logo.setGeometry(QtCore.QRect(110, 30, 365, 50))
        self.logo.setStyleSheet("font-size: 36px;\n"
"color: #BB00FF; /* Фиолетовый цвет текста */\n"
"font-weight: bold; /* Жирный текст */\n"
"\n"
"")
        self.logo.setObjectName("logo")
        self.select_label = QtWidgets.QLabel(self.centralwidget)
        self.select_label.setGeometry(QtCore.QRect(40, 160, 390, 34))
        self.select_label.setStyleSheet("font-size: 24px;\n"
"color: white; /* Фиолетовый цвет текста */\n"
"font-weight: bold; /* Жирный текст */")
        self.select_label.setObjectName("select_label")
        self.spinbox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinbox.setGeometry(QtCore.QRect(460, 150, 51, 51))
        self.spinbox.setStyleSheet("QSpinBox {\n"
"    background-color: #1e1e1e;  /* Темный фон для общего вида */\n"
"    color: #ffffff;  /* Белый цвет текста для хорошей видимости */\n"
"    border: 2px solid #BB00FF;  /* Фиолетовая обводка */\n"
"    border-radius: 5px;  /* Закругленные углы */\n"
"    padding: 5px;  /* Отступы внутри SpinBox */\n"
"    font-size: 16px;  /* Размер текста */\n"
"}\n"
"\n"
"QSpinBox::up-button {\n"
"    background-color: #2e2e2e;  /* Темный цвет кнопки вверх */\n"
"    border-left: 1px solid #BB00FF;  /* Фиолетовая линия между кнопками и текстом */\n"
"    width: 16px;\n"
"}\n"
"\n"
"QSpinBox::down-button {\n"
"    background-color: #2e2e2e;  /* Темный цвет кнопки вниз */\n"
"    border-left: 1px solid #BB00FF;  /* Фиолетовая линия */\n"
"    width: 16px;\n"
"}\n"
"\n"
"QSpinBox::up-arrow {\n"
"    image: url(/path/to/your/icon/up-arrow.png);  /* Можете заменить путь на иконку стрелки вверх */\n"
"    width: 10px;\n"
"    height: 10px;\n"
"}\n"
"\n"
"QSpinBox::down-arrow {\n"
"    image: url(/path/to/your/icon/down-arrow.png);  /* Можете заменить путь на иконку стрелки вниз */\n"
"    width: 10px;\n"
"    height: 10px;\n"
"}\n"
"\n"
"QSpinBox::up-button:hover, QSpinBox::down-button:hover {\n"
"    background-color: #BB00FF;  /* Фиолетовая подсветка кнопки при наведении */\n"
"    color: #1e1e1e;  /* Цвет текста меняется на темный */\n"
"}\n"
"\n"
"QSpinBox::up-button:pressed, QSpinBox::down-button:pressed {\n"
"    background-color: #8800CC;  /* Темно-фиолетовый цвет при нажатии */\n"
"}\n"
"")
        self.spinbox.setObjectName("spinbox")
        self.specialsing = QtWidgets.QCheckBox(self.centralwidget)
        self.specialsing.setGeometry(QtCore.QRect(20, 230, 196, 51))
        self.specialsing.setStyleSheet("QCheckBox {\n"
"    color: #ffffff;  /* Белый цвет текста для хорошей видимости */\n"
"    background-color: #1e1e1e;  /* Темный фон */\n"
"    padding: 5px;\n"
"    font-size: 26px;  /* Размер текста */\n"
"    font-weight: bold;  /* Жирный текст */\n"
"    border: 2px solid #BB00FF;  /* Фиолетовая обводка */\n"
"    border-radius: 5px;  /* Закругленные углы */\n"
"}\n"
"\n"
"QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator:unchecked {\n"
"    border: 2px solid #BB00FF;  /* Фиолетовая обводка для неотмеченного состояния */\n"
"    background-color: #1e1e1e;  /* Темный фон */\n"
"}\n"
"\n"
"QCheckBox::indicator:checked {\n"
"    background-color: #BB00FF;  /* Фиолетовый цвет для отмеченного состояния */\n"
"    border: 2px solid #8800CC;  /* Темно-фиолетовая обводка для отмеченного состояния */\n"
"}\n"
"\n"
"QCheckBox::indicator:hover {\n"
"    background-color: #8800CC;  /* Темно-фиолетовый фон при наведении */\n"
"    border: 2px solid #BB00FF;  /* Яркая обводка при наведении */\n"
"}\n"
"")
        self.specialsing.setObjectName("specialsing")
        self.numbers = QtWidgets.QCheckBox(self.centralwidget)
        self.numbers.setGeometry(QtCore.QRect(240, 230, 162, 51))
        self.numbers.setStyleSheet("QCheckBox {\n"
"    color: #ffffff;  /* Белый цвет текста для хорошей видимости */\n"
"    background-color: #1e1e1e;  /* Темный фон */\n"
"    padding: 5px;\n"
"    font-size: 26px;  /* Размер текста */\n"
"    font-weight: bold;  /* Жирный текст */\n"
"    border: 2px solid #BB00FF;  /* Фиолетовая обводка */\n"
"    border-radius: 5px;  /* Закругленные углы */\n"
"}\n"
"\n"
"QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator:unchecked {\n"
"    border: 2px solid #BB00FF;  /* Фиолетовая обводка для неотмеченного состояния */\n"
"    background-color: #1e1e1e;  /* Темный фон */\n"
"}\n"
"\n"
"QCheckBox::indicator:checked {\n"
"    background-color: #BB00FF;  /* Фиолетовый цвет для отмеченного состояния */\n"
"    border: 2px solid #8800CC;  /* Темно-фиолетовая обводка для отмеченного состояния */\n"
"}\n"
"\n"
"QCheckBox::indicator:hover {\n"
"    background-color: #8800CC;  /* Темно-фиолетовый фон при наведении */\n"
"    border: 2px solid #BB00FF;  /* Яркая обводка при наведении */\n"
"}\n"
"")
        self.numbers.setObjectName("numbers")
        self.capslock = QtWidgets.QCheckBox(self.centralwidget)
        self.capslock.setGeometry(QtCore.QRect(420, 230, 158, 51))
        self.capslock.setStyleSheet("QCheckBox {\n"
"    color: #ffffff;  /* Белый цвет текста для хорошей видимости */\n"
"    background-color: #1e1e1e;  /* Темный фон */\n"
"    padding: 5px;\n"
"    font-size: 26px;  /* Размер текста */\n"
"    font-weight: bold;  /* Жирный текст */\n"
"    border: 2px solid #BB00FF;  /* Фиолетовая обводка */\n"
"    border-radius: 5px;  /* Закругленные углы */\n"
"}\n"
"\n"
"QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator:unchecked {\n"
"    border: 2px solid #BB00FF;  /* Фиолетовая обводка для неотмеченного состояния */\n"
"    background-color: #1e1e1e;  /* Темный фон */\n"
"}\n"
"\n"
"QCheckBox::indicator:checked {\n"
"    background-color: #BB00FF;  /* Фиолетовый цвет для отмеченного состояния */\n"
"    border: 2px solid #8800CC;  /* Темно-фиолетовая обводка для отмеченного состояния */\n"
"}\n"
"\n"
"QCheckBox::indicator:hover {\n"
"    background-color: #8800CC;  /* Темно-фиолетовый фон при наведении */\n"
"    border: 2px solid #BB00FF;  /* Яркая обводка при наведении */\n"
"}\n"
"")
        self.capslock.setObjectName("capslock")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(200, 350, 161, 51))
        self.pushButton.clicked.connect(self.on_generate_password)
        self.pushButton.setStyleSheet("QPushButton {\n"
"    background-color: #1e1e1e;  /* Темный фон кнопки */\n"
"    color: #ffffff;  /* Белый цвет текста для хорошей видимости */\n"
"    border: 2px solid #BB00FF;  /* Фиолетовая обводка */\n"
"    border-radius: 5px;  /* Закругленные углы */\n"
"    padding: 10px 20px;  /* Отступы для более крупной кнопки */\n"
"    font-size: 16px;  /* Размер текста */\n"
"    font-weight: bold;  /* Жирный текст */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #BB00FF;  /* Фиолетовая подсветка при наведении */\n"
"    color: #1e1e1e;  /* Темный цвет текста при наведении */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #8800CC;  /* Темно-фиолетовый цвет при нажатии */\n"
"    border: 2px solid #8800CC;  /* Обводка становится темнее при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #3a3a3a;  /* Темный серый фон для неактивной кнопки */\n"
"    color: #777777;  /* Серый цвет текста для неактивного состояния */\n"
"    border: 2px solid #3a3a3a;  /* Убираем яркость обводки в неактивном состоянии */\n"
"}\n"
"")
        self.pushButton.setObjectName("pushButton")
        self.passline = QtWidgets.QLineEdit(self.centralwidget)
        self.passline.setGeometry(QtCore.QRect(190, 460, 181, 61))
        self.passline.setStyleSheet("""
    QLineEdit {
        background-color: #1e1e1e;  /* Темный фон */
        color: #ffffff;  /* Белый цвет текста */
        font-size: 24px;  /* Увеличенный размер текста */
        font-weight: bold;  /* Жирный текст */
        border: 2px solid #BB00FF;  /* Фиолетовая обводка */
        border-radius: 5px;  /* Закругленные углы */
        padding: 10px;  /* Внутренние отступы */
    }
    
    QLineEdit:focus {
        border: 2px solid #8800CC;  /* Темно-фиолетовая обводка при фокусе */
    }
""")

        #self.passline.setStyleSheet("color: white")
        #self.passline.setObjectName("passline")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Password Generator"))
        self.logo.setText(_translate("MainWindow", "Password Generator"))
        self.select_label.setText(_translate("MainWindow", "select the number of characters:"))
        self.specialsing.setText(_translate("MainWindow", "special sing"))
        self.numbers.setText(_translate("MainWindow", "numbers"))
        self.capslock.setText(_translate("MainWindow", "capslock"))
        self.pushButton.setText(_translate("MainWindow", "Generate"))

    def on_generate_password(self):
        # Получаем длину пароля из SpinBox
        length = self.spinbox.value()

        # Получаем состояния чекбоксов
        use_caps = self.capslock.isChecked()
        use_numbers = self.numbers.isChecked()
        use_specials = self.specialsing.isChecked()

        # Генерация пароля с помощью функции из отдельного файла
        password = generate_password(length, use_caps, use_numbers, use_specials)

        # Отображаем пароль в LineEdit
        self.passline.setText(password)


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setupUi(self)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
